{"version":3,"file":"yup-phone.cjs.js","sources":["../src/index.ts"],"sourcesContent":["import { StringSchema } from 'yup';\nimport * as gPhoneNumber from 'google-libphonenumber';\n\nconst phoneUtil = gPhoneNumber.PhoneNumberUtil.getInstance();\n\ndeclare module 'yup' {\n  export interface StringSchema {\n    phone(countryCode?: string, strict?: boolean): StringSchema;\n  }\n}\n\nconst CLDR_REGION_CODE_SIZE = 2;\n\nconst isValidCountryCode = (countryCode: any): boolean => typeof countryCode === 'string' && countryCode.length === CLDR_REGION_CODE_SIZE;\n\nexport const YUP_METHOD = 'phone';\nexport default function phoneValidationMethod(\n  this: StringSchema,\n  countryCode?: string,\n  strict: boolean = false,\n) {\n  const errMsg = isValidCountryCode(countryCode)\n    ? `\\${path} must be a valid phone number for region ${countryCode}`\n    : '${path} must be a valid phone number.'; // eslint-disable-line no-template-curly-in-string\n\n  return this.test(YUP_METHOD, errMsg, (value: string) => {\n    if (!isValidCountryCode(countryCode)) {\n      // if not valid countryCode, then set default country to India (IN)\n      countryCode = 'US';\n      strict = false;\n    }\n\n    const phoneNumber = phoneUtil.parseAndKeepRawInput(value, countryCode);\n\n    if (!phoneUtil.isPossibleNumber(phoneNumber)) {\n      return false;\n    }\n\n    const regionCodeFromPhoneNumber = phoneUtil.getRegionCodeForNumber(phoneNumber);\n\n    /* check if the countryCode provided should be used as\n       default country code or strictly followed\n     */\n\n    let isValid;\n    try {\n      isValid = strict\n        ? phoneUtil.isValidNumberForRegion(phoneNumber, countryCode)\n        : phoneUtil.isValidNumberForRegion(phoneNumber, regionCodeFromPhoneNumber);\n    } catch (error) {\n      isValid = false;\n    }\n\n    return !!isValid;\n  });\n}\n"],"names":["phoneUtil","gPhoneNumber.PhoneNumberUtil","CLDR_REGION_CODE_SIZE","isValidCountryCode","countryCode","length","YUP_METHOD","phoneValidationMethod","strict","errMsg","test","value","phoneNumber","parseAndKeepRawInput","isPossibleNumber","regionCodeFromPhoneNumber","getRegionCodeForNumber","isValid","isValidNumberForRegion","error"],"mappings":"sHAGMA,UAAYC,YAAAA,gBAAAA,YAAAA,GAQZC,sBAAwB,EAExBC,mBAAqBA,QAAA,CAACC,CAAD,QAAsD,WAAvB,MAAOA,IAA4BA,CAAAC,UAAuBH,uBAEvGI,WAAa,OACZC;QAAUA,sBAAV,CAEZH,CAFY,CAGZI,CAHY,CAGW,UAAvBA,IAAAA,EAAkB,CAAA,OAEZC,EAASN,kBAAA,CAAmBC,CAAnB,CAAA,mDAAA,CACyCA,CADzC,CAEX,8CAEG,KAAAM,KAAA,CAAUJ,UAAV,CAAsBG,CAAtB,CAA8B,SAACE,EAAiB,CAChDR,kBAAA,CAAmBC,CAAnB,IAEHA,CACA,CADc,IACd,CAAAI,CAAA,CAAS,CAAA,EAGLI,EAAAA,CAAcZ,SAAAa,qBAAA,CAA+BF,CAA/B,CAAsCP,CAAtC,KAEhB,CAACJ,SAAAc,iBAAA,CAA2BF,CAA3B,QACI,CAAA,MAGHG,EAA4Bf,SAAAgB,uBAAA,CAAiCJ,CAAjC,KAO9B,CACF,IAAAK,EAAUT,CAAA,CACNR,SAAAkB,uBAAA,CAAiCN,CAAjC,CAA8CR,CAA9C,CADM,CAENJ,SAAAkB,uBAAA,CAAiCN,CAAjC,CAA8CG,CAA9C,CAHF,CAIF,MAAOI,CAAP,CAAc,CACdF,CAAA,CAAU,CAAA,CADI,OAIT,CAAC,CAACA,CA5B4C,CAAhD,CANgB;;"}