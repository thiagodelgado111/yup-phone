{"version":3,"file":"yup-phone.cjs.js","sources":["../src/index.ts"],"sourcesContent":["import { StringSchema } from 'yup';\nimport * as gPhoneNumber from 'google-libphonenumber';\n\nconst phoneUtil = gPhoneNumber.PhoneNumberUtil.getInstance();\n\ndeclare module 'yup' {\n  export interface StringSchema {\n    phone(countryCode?: string, strict?: boolean): StringSchema;\n  }\n}\n\nconst CLDR_REGION_CODE_SIZE = 2;\n\nconst isValidCountryCode = (countryCode: any): boolean => typeof countryCode === 'string' && countryCode.length === CLDR_REGION_CODE_SIZE;\n\nexport const YUP_METHOD = 'phone';\nexport default function phoneValidationMethod(\n  this: StringSchema,\n  countryCode?: string,\n  strict: boolean = false,\n) {\n  const errMsg = isValidCountryCode(countryCode)\n    ? `\\${path} must be a valid phone number for region ${countryCode}`\n    : '${path} must be a valid phone number.'; // eslint-disable-line no-template-curly-in-string\n\n  return this.test({\n    name: YUP_METHOD,\n    message: errMsg,\n    test(value: string) {\n      // eslint-disable-next-line no-underscore-dangle\n      if (this.schema._nullable && value === null) {\n        return this.resolve(true);\n      }\n\n      if (!isValidCountryCode(countryCode)) {\n        // if not valid countryCode, then set default country to India (IN)\n        // eslint-disable-next-line no-param-reassign\n        countryCode = 'US';\n        // eslint-disable-next-line no-param-reassign\n        strict = false;\n      }\n\n      let isValid;\n      try {\n        const phoneNumber = phoneUtil.parseAndKeepRawInput(value, countryCode);\n        if (!phoneUtil.isPossibleNumber(phoneNumber)) {\n          return false;\n        }\n\n        const regionCodeFromPhoneNumber = phoneUtil.getRegionCodeForNumber(phoneNumber);\n\n        /* check if the countryCode provided should be used as\n        default country code or strictly followed\n      */\n        isValid = strict\n          ? phoneUtil.isValidNumberForRegion(phoneNumber, countryCode)\n          : phoneUtil.isValidNumberForRegion(phoneNumber, regionCodeFromPhoneNumber);\n      } catch (error) {\n        isValid = false;\n      }\n\n      return this.resolve(isValid);\n    },\n  });\n}\n"],"names":["phoneUtil","gPhoneNumber.PhoneNumberUtil","CLDR_REGION_CODE_SIZE","isValidCountryCode","countryCode","length","YUP_METHOD","phoneValidationMethod","strict","errMsg","test","name","message","value","schema","_nullable","resolve","phoneNumber","parseAndKeepRawInput","isPossibleNumber","regionCodeFromPhoneNumber","getRegionCodeForNumber","isValid","isValidNumberForRegion","error"],"mappings":"sHAGMA,UAAYC,YAAAA,gBAAAA,YAAAA,GAQZC,sBAAwB,EAExBC,mBAAqBA,QAAA,CAACC,CAAD,QAAsD,WAAvB,MAAOA,IAA4BA,CAAAC,UAAuBH,uBAEvGI,WAAa,OACZC;QAAUA,sBAAV,CAEZH,CAFY,CAGZI,CAHY,CAGW,UAAvBA,IAAAA,EAAkB,CAAA,OAEZC,EAASN,kBAAA,CAAmBC,CAAnB,CAAA,mDAAA,CACyCA,CADzC,CAEX,8CAEG,KAAAM,KAAA,CAAU,CACfC,KAAML,UADS,CAEfM,QAASH,CAFM,CAGfC,cAAKG,EAAa,IAEZ,IAAAC,OAAAC,YAAmC,OAAVF,QACpB,KAAAG,QAAA,CAAa,CAAA,CAAb,CAGJb,mBAAA,CAAmBC,CAAnB,IAGHA,CAEA,CAFc,IAEd,CAAAI,CAAA,CAAS,CAAA,MAIP,KACIS,EAAcjB,SAAAkB,qBAAA,CAA+BL,CAA/B,CAAsCT,CAAtC,KAChB,CAACJ,SAAAmB,iBAAA,CAA2BF,CAA3B,QACI,CAAA,MAGHG,EAA4BpB,SAAAqB,uBAAA,CAAiCJ,CAAjC,CAKlC,KAAAK,EAAUd,CAAA,CACNR,SAAAuB,uBAAA,CAAiCN,CAAjC;AAA8Cb,CAA9C,CADM,CAENJ,SAAAuB,uBAAA,CAAiCN,CAAjC,CAA8CG,CAA9C,CAbF,CAcF,MAAOI,CAAP,CAAc,CACdF,CAAA,CAAU,CAAA,CADI,OAIT,KAAAN,QAAA,CAAaM,CAAb,CAjCS,CAHH,CAAV,CANgB;"}